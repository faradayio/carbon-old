= Carbon

Carbon is a Ruby API wrapper for the {Brighter Planet emission estimate web service}[http://carbon.brighterplanet.com], which is located at http://carbon.brighterplanet.com.

By querying the web service, it can estimate the carbon emissions of many real-life objects, such as cars and houses, based on particular attributes that they may have.

== Quick start

*You'll need a Brighter Planet API key. See the "API keys" section below for details.*

First get the gem:

    $ gem install carbon

Carbon works by extending any Ruby class you're using to represent an emission source. For instance, let's say you have a Ruby class <tt>RentalCar</tt> that represents a rental car on your lot. (Note that ActiveRecord models work great with carbon.)

    class RentalCar
      attr_accessor :year, :make, :model, :fuel_efficiency, :daily_distance_average, :purchase_date, :retirement_date
    end

In order to calculate carbon emissions, we need to map the car's relevant attributes to characteristics that the {web service}[http://carbon.brighterplanet.com] will recognize. In this case, a review of the available characteristics for Automobile[http://carbon.brighterplanet.com/automobiles/options] yields the following map:

    class RentalCar
      include Carbon
      [...]
      emit_as :automobile do
        provide :model_year, :as => :year # you say tomayto, I say tomahto
        provide :make
        provide :model
        provide :fuel_efficiency
        provide :daily_distance_estimate, :as => daily_distance_average
        provide :acquisition, :as => :purchase_date
        provide :retirement, :as => :retirement_date
      end
    end

When you want to calculate emissions, simply call <tt>RentalCar</tt>#<tt>emission</tt>. Memoize this method on your class or store the result; <tt>#emision</tt> makes a web service call every time it is invoked.

    > my_car = RentalCar.new([...])
    => #<RentalCar [...]>
    > my_emission = my_car.emission
    => #<Carbon::EmissionEstimate [...]>
    > my_emission.to_f
    => 4919.2
    > my_emission.emission_units
    => "kilograms"
    > my_emission.methodology
    => "http://carbon.brighterplanet.com/automobiles.html?[...]"
    
=== Asynchronous queries

To request an emission estimate asynchronously, simply pass an URL as the +:callback+ option to +#emission+:

    > RentalCar.new.emission :callback => http://example.com/my/callback/handler

A good way to test this is to set up a {PostBin}[http://postbin.org]

== Documentation

Read the {carbon gem RDoc}[http://rdoc.info/projects/brighterplanet/carbon] for more.

== Exceptions

Since this gem connects to a web service, you need to be ready for network problems and latency. For example:

    begin
      my_emission = my_car.emission
    rescue ::SocketError, ::Timeout::Error, ::Errno::ETIMEDOUT, ::Errno::ENETUNREACH, ::Errno::ECONNRESET, ::Errno::ECONNREFUSED
      # These are general network errors raised by Net::HTTP.
      # Your internet connection might be down, or our servers might be down.
    rescue ::Carbon::RateLimited
      # Realtime mode only.
      # In order to prevent denial-of-service attacks, our servers rate limit requests.
      # The gem will try up to three times to get an answer back from the server, waiting slightly longer each time.
      # If you still get this exception, please contact us at staff@brighterplanet.com and we'll lift your rate.
    rescue ::Carbon::RealtimeEstimateFailed
      # Realtime mode only.
      # Our server returned a 4XX or 5XX error.
      # Please contact us at staff@brighterplanet.com if you get these more than a couple times.
    rescue ::Carbon::QueueingFailed
      # Async mode only.
      # The gem connects directly to Amazon SQS in order to provide maximum throughput. If that service returns anything other than success, you get this exception.
      # Please contact us at staff@brighterplanet.com if you see too many of these.
    end

== API keys

You should get an API key from http://keys.brighterplanet.com and set it globally:

    Carbon.key = '12903019230128310293'

Now all of your queries will use that key.

== Copyright

Copyright (c) 2010 Brighter Planet.
