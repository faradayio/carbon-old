= Carbon

Carbon is a Ruby API wrapper for the {Brighter Planet emission estimate web service}[http://carbon.brighterplanet.com], which is located at http://carbon.brighterplanet.com. By querying the web service, it can estimate the carbon emissions of many real-life objects, such as cars and houses, based on particular attributes that they may have.

== Full documentation

Give the quick start a try! Once you've exhausted that, read the {carbon gem RDoc}[http://rdoc.info/projects/brighterplanet/carbon] for more.

== Real-life integration guide

In addition to the quick start and full documentation, check out the {integration guide}[http://github.com/brighterplanet/carbon/blob/master/doc/INTEGRATION_GUIDE.rdoc]. It has code examples from our real-life migration followed by brief developer commentary.

== Quick start

<b>You'll need a Brighter Planet API key. See the "API keys" section below for details.</b>

First get the gem:

    $ gem install carbon

Carbon works by extending any Ruby class you're using to represent an emission source. For instance, let's say you have a Ruby class <tt>RentalCar</tt> that represents a rental car on your lot. (Note that ActiveRecord models work great with this gem.)

    class RentalCar
      attr_accessor :model, :model_year, :fuel_economy
      class Make
        attr_accessor :name
        def to_param
          name
        end
      end
      def make
        @make ||= Make.new
      end
    end

In order to calculate carbon emissions, we need to map the car's relevant attributes to characteristics that the {web service}[http://carbon.brighterplanet.com] will recognize. In this case, a review of the available characteristics for Automobile[http://carbon.brighterplanet.com/automobiles/options] yields the following map:

    class RentalCar
      # [...]
      include Carbon
      emit_as :automobile do
        provide :make
        provide :model
        provide :model_year
        provide :fuel_economy, :as => :fuel_efficiency
      end
    end

When you want to calculate emissions, simply call <tt>RentalCar#emission_estimate</tt>.

    > my_car = RentalCar.new([...])
    => #<RentalCar [...]>
    > my_emission = my_car.emission_estimate
    => #<Carbon::EmissionEstimate [...]>
    > my_emission.to_f
    => 4919.2
    > my_emission.emission_units
    => "kilograms"
    > my_emission.methodology
    => "http://carbon.brighterplanet.com/automobiles.html?[...]"

== API keys

You should get an API key from http://keys.brighterplanet.com and set it globally:

    Carbon.key = '12903019230128310293'

Now all of your queries will use that key.

== A note on <tt>#to_characteristic</tt> and <tt>#to_param</tt>

Once you understand how to map attributes using the DSL, you might still be confused about what the gem actually calls on your objects.

The answer: <tt>#to_characteristic</tt> and, failing that, <tt>#to_param</tt>.

Let's say <tt>RentalCar#make</tt> returns a <tt>Make</tt> object. You should define either <tt>Make#to_characteristic</tt> or <tt>Make#to_param</tt>. The gem <b>doesn't know</b> that you want it to call <tt>Make#name</tt> or <tt>Make#epa_code</tt> or anything else.

== A note on asynchronous queries

To specify that the result of a query should be POSTed back to you, simply pass an URL as the <tt>:callback</tt> option to <tt>#emission_estimate</tt>:

    > RentalCar.new.emission_estimate :callback => 'http://example.com/my/callback/handler'

A good way to test this is to set up a {PostBin}[http://postbin.org].

You can specify that the result be stored on S3 so that future identical requests can use the same estimate:

    > RentalCar.new.emission_estimate :guid => 'A_GLOBALLY_UNIQUE_IDENTIFIER_FOR_THIS_EMISSION_ESTIMATE'

You might think of <tt>:guid</tt> as a hash key or a cache key, but it is not necessarily unique to the emitter object... rather it should identify the particular set of characteristics on that emitter. That way other emitters, if they have the same characteristics, can use the same estimate.

If you combine <tt>:guid</tt> and <tt>:defer => true</tt>, you have an easy, cheap 2-pass reporting system:

    # pass 1: cron job runs a whole bunch of these
    > car51.emission_estimate :guid => '[...]', :defer => true
    > car52.emission_estimate :guid => '[...]', :defer => true
    > car96.emission_estimate :guid => '[...]', :defer => true
    
    # pass 2: a while later, cron job runs these
    > car51.emission_estimate :guid => '[...]'
    > car52.emission_estimate :guid => '[...]'
    > car96.emission_estimate :guid => '[...]'

Most of these will be pre-calculated by the time you run pass #2. If any of them aren't done processing yet, it will revert to a real-time estimate... no big deal!

== Possible combinations

* () Runs a normal realtime request.
* (timeout) Runs a realtime request but allows timing out the network call. Raises <tt>Timeout::Error</tt> if timeout is exceeded.
* (guid) Runs a realtime request, but first checks if there is a result pre-calculated on S3. Stores result to S3 if there isn't.
* (callback) Runs an async request (so you don't immediately get the result back). The result will be POSTed to the URL you specify.
* (guid,defer) Runs an async request (so you don't immediately get the result back). The result will be stored to S3 as <tt>hxxp://storage.carbon.brighterplanet.com/SHA1-hexdigest-of-key+guid</tt>
* (guid,timeout) (NOT IMPLEMENTED) A hybrid "best effort" request that is as cheap as an async request but will try to return the full result data immediately. It keeps trying S3 until your timeout is exceeded, at which point it's just a normal async request.

== A note on exceptions

Since this gem connects to a web service, you need to be ready for network problems and latency. For example:

    begin
      my_emission = my_car.emission_estimate
    rescue ::SocketError, ::EOFError, ::Timeout::Error, ::Errno::ETIMEDOUT, ::Errno::ENETUNREACH, ::Errno::ECONNRESET, ::Errno::ECONNREFUSED
      # These are general network errors raised by Net::HTTP.
      # Your internet connection might be down, or our servers might be down.
    rescue ::Carbon::RateLimited
      # Realtime mode only.
      # In order to prevent denial-of-service attacks, our servers rate limit requests.
      # The gem will try up to three times to get an answer back from the server, waiting slightly longer each time.
      # If you still get this exception, please contact us at staff@brighterplanet.com and we'll lift your rate.
    rescue ::Carbon::RealtimeEstimateFailed
      # Realtime mode only.
      # Our server returned a 4XX or 5XX error.
      # Please contact us at staff@brighterplanet.com if you get these more than a couple times.
    rescue ::Carbon::QueueingFailed
      # Async mode only.
      # The gem connects directly to Amazon SQS in order to provide maximum throughput. If that service returns anything other than success, you get this exception.
      # Please contact us at staff@brighterplanet.com if you see too many of these.
    end

== Copyright

Copyright (c) 2010 Brighter Planet.
